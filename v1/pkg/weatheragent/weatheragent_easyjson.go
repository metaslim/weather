// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package weatheragent

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent(in *jlexer.Lexer, out *WeatherStackResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current":
			easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent1(in, &out.Current)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent(out *jwriter.Writer, in WeatherStackResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current\":"
		out.RawString(prefix[1:])
		easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent1(out, in.Current)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WeatherStackResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WeatherStackResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WeatherStackResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WeatherStackResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent(l, v)
}
func easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent1(in *jlexer.Lexer, out *WeatherStackWeather) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "temperature":
			out.Temperature = int(in.Int())
		case "wind_speed":
			out.WindSpeed = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent1(out *jwriter.Writer, in WeatherStackWeather) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"temperature\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Temperature))
	}
	{
		const prefix string = ",\"wind_speed\":"
		out.RawString(prefix)
		out.Int(int(in.WindSpeed))
	}
	out.RawByte('}')
}
func easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent2(in *jlexer.Lexer, out *OpenWeatherResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "main":
			easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent3(in, &out.Main)
		case "wind":
			easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent4(in, &out.Wind)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent2(out *jwriter.Writer, in OpenWeatherResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"main\":"
		out.RawString(prefix[1:])
		easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent3(out, in.Main)
	}
	{
		const prefix string = ",\"wind\":"
		out.RawString(prefix)
		easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent4(out, in.Wind)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenWeatherResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenWeatherResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenWeatherResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenWeatherResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent2(l, v)
}
func easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent4(in *jlexer.Lexer, out *OpenWeatherWind) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "speed":
			out.WindSpeed = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent4(out *jwriter.Writer, in OpenWeatherWind) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"speed\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.WindSpeed))
	}
	out.RawByte('}')
}
func easyjson5bfce153DecodeGithubComMetaslimWeatherV1PkgWeatheragent3(in *jlexer.Lexer, out *OpenWeatherMain) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "temp":
			out.Temperature = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5bfce153EncodeGithubComMetaslimWeatherV1PkgWeatheragent3(out *jwriter.Writer, in OpenWeatherMain) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"temp\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Temperature))
	}
	out.RawByte('}')
}
