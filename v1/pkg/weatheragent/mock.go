// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package weatheragent

import (
	"context"
	"github.com/metaslim/weather/v1/pkg/response"
	"sync"
)

var (
	lockWeatherAgentMockGetData sync.RWMutex
)

// Ensure, that WeatherAgentMock does implement WeatherAgent.
// If this is not the case, regenerate this file with moq.
var _ WeatherAgent = &WeatherAgentMock{}

// WeatherAgentMock is a mock implementation of WeatherAgent.
//
//     func TestSomethingThatUsesWeatherAgent(t *testing.T) {
//
//         // make and configure a mocked WeatherAgent
//         mockedWeatherAgent := &WeatherAgentMock{
//             GetDataFunc: func(in1 context.Context, in2 string) (response.WeatherResponse, error) {
// 	               panic("mock out the GetData method")
//             },
//         }
//
//         // use mockedWeatherAgent in code that requires WeatherAgent
//         // and then make assertions.
//
//     }
type WeatherAgentMock struct {
	// GetDataFunc mocks the GetData method.
	GetDataFunc func(in1 context.Context, in2 string) (response.WeatherResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetData holds details about calls to the GetData method.
		GetData []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
		}
	}
}

// GetData calls GetDataFunc.
func (mock *WeatherAgentMock) GetData(in1 context.Context, in2 string) (response.WeatherResponse, error) {
	if mock.GetDataFunc == nil {
		panic("WeatherAgentMock.GetDataFunc: method is nil but WeatherAgent.GetData was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
	}{
		In1: in1,
		In2: in2,
	}
	lockWeatherAgentMockGetData.Lock()
	mock.calls.GetData = append(mock.calls.GetData, callInfo)
	lockWeatherAgentMockGetData.Unlock()
	return mock.GetDataFunc(in1, in2)
}

// GetDataCalls gets all the calls that were made to GetData.
// Check the length with:
//     len(mockedWeatherAgent.GetDataCalls())
func (mock *WeatherAgentMock) GetDataCalls() []struct {
	In1 context.Context
	In2 string
} {
	var calls []struct {
		In1 context.Context
		In2 string
	}
	lockWeatherAgentMockGetData.RLock()
	calls = mock.calls.GetData
	lockWeatherAgentMockGetData.RUnlock()
	return calls
}
